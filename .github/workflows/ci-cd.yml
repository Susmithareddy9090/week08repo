# .github/workflows/ci-cd.yml
name: Unified CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - development
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches:
      - development

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  # 1. Backend Tests + Build
  backend_test_build:
    runs-on: ubuntu-latest
    services:
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports: [5432:5432]
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports: [5433:5432]
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install backend deps
        run: cd backend && npm install
      - name: Run backend tests
        run: cd backend && npm test
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Login to ACR
        run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}
      - name: Build & Push Backend Images
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/backend:${{ env.IMAGE_TAG }} ./backend/
          docker push ${{ env.ACR_LOGIN_SERVER }}/backend:${{ env.IMAGE_TAG }}

  # 2. Frontend Build
  frontend_build:
    runs-on: ubuntu-latest
    needs: backend_test_build
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Login to ACR
        run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}
      - name: Build & Push Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} ./frontend/
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}

  # 3. Deploy Backend
  deploy_backend:
    runs-on: ubuntu-latest
    needs: frontend_build
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set AKS Context
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --overwrite-existing
      - name: Attach ACR
        run: |
          az aks update \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --attach-acr ${{ secrets.AZURE_CONTAINER_REGISTRY }}
      - name: Deploy Backend to AKS
        run: |
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml

  # 4. Deploy Frontend
  deploy_frontend:
    runs-on: ubuntu-latest
    needs: deploy_backend
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set AKS Context
        run: |
          az aks get-credentials \
            --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} \
            --name ${{ secrets.AKS_CLUSTER_NAME }} \
            --overwrite-existing
      - name: Deploy Frontend to AKS
        run: |
          kubectl apply -f k8s/frontend-deployment.yaml